version: '3.8'

services:
  redis:
    image: redis:7
    container_name: redis
    hostname: ${REDIS_HOST}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  rabbit-init:
    build: ./rabbit
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    restart: "no"

  postgres:
    image: postgres:16
    container_name: postgres
    hostname: ${POSTGRES_HOST}
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 10

  minio:
    image: minio/minio
    container_name: minio
    hostname: minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set myminio http://minio:9000 minioadmin minioadmin;
        mc mb -p myminio/musics;
        mc mb -p myminio/image;
        mc mb -p myminio/analytics;
        echo 'Buckets created';
        exit 0;
      "

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: true
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  es-init:
    image: curlimages/curl:latest
    depends_on:
      - elasticsearch
    entrypoint: >
      sh -c "
        sleep 10;
        curl -u elastic:admin -X PUT http://elasticsearch:9200/songs -H 'Content-Type: application/json' -d @/config/songs-index.json
        echo 'Index created';
      "
    volumes:
      - ./config:/config:ro

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana.ini:/etc/grafana/grafana.ini


  kong-migrations:
    build:
      context: .
      dockerfile: kong/Dockerfile.kong
    container_name: kong-migrations
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/sh
    command: -c "/wait-for-it.sh ${KONG_PG_HOST}:${KONG_PG_PORT} -- kong migrations bootstrap"
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${POSTGRES_HOST}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PORT: ${POSTGRES_PORT}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}

  kong:
    image: kong:3.6
    container_name: kong
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    restart: on-failure
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${POSTGRES_HOST}
      KONG_PG_PORT: ${POSTGRES_PORT}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"



  celery-beat:
    build: ./analytics
    container_name: celery-beat
    command: celery -A analytics beat -l info
    depends_on:
      - rabbitmq
      - redis

  auth:
    build:
      context: ./auth
      args:
        NODE_ENV: ${NODE_ENV}
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_USER: ${AUTH_DB_USER}
      DB_PASS: ${AUTH_DB_PASS}
      DB_NAME: ${POSTGRES_DB}
      DB_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      MINIO_ENDPOINT: minio
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${AUTH_PORT}:3000"

  user:
    build:
      context: ./user
      args:
        NODE_ENV: ${NODE_ENV}
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_USER: ${USER_DB_USER}
      DB_PASS: ${USER_DB_PASS}
      DB_NAME: ${POSTGRES_DB}
      DB_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      MINIO_ENDPOINT: minio
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${USER_PORT}:3000"

  music:
    build:
      context: ./music
      args:
        NODE_ENV: ${NODE_ENV}
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_USER: ${MUSIC_DB_USER}
      DB_PASS: ${MUSIC_DB_PASS}
      DB_NAME: ${POSTGRES_DB}
      DB_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      MINIO_ENDPOINT: minio
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MUSIC_PORT}:3000"

  search:
    build: ./search
    container_name: search
    hostname: search
    depends_on:
      - elasticsearch
      - redis
    volumes:
      - ./search:/app
    ports:
      - "8005:8000"
    env_file:
      - .env

  playlist:
    build: ./playlist
    container_name: playlist
    hostname: playlist
    env_file:
      - .env
    depends_on:
      - elasticsearch
      - redis
    volumes:
      - ./playlist:/app
    ports:
      - "8010:8000"

  analytics-celery:
    build: ./analytics
    container_name: analytics_celery
    env_file:
      - .env
    volumes:
      - ./analytics:/app
    depends_on:
      - rabbitmq
      - minio
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbit:5672//
    command: >
      celery -A celery_app worker --loglevel=info

  analytics-beat:
    build: ./analytics
    container_name: analytics-beat
    volumes:
      - ./analytics:/app
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbit:5672//
    command: >
      celery -A celery_app beat --loglevel=info


volumes:
  redis_data:
  rabbitmq_data:
  postgres_data:
  minio_data:
  es_data:
  grafana_data:

networks:
  monitoring:
  events:
  analytics:
  api-gateway:
  databse:
